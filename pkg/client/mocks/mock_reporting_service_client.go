// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/reporting-client/pkg/api/v1 (interfaces: ReportingServiceClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/reporting-client/pkg/api/v1"
	grpc "google.golang.org/grpc"
)

// MockReportingServiceClient is a mock of ReportingServiceClient interface
type MockReportingServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockReportingServiceClientMockRecorder
}

// MockReportingServiceClientMockRecorder is the mock recorder for MockReportingServiceClient
type MockReportingServiceClientMockRecorder struct {
	mock *MockReportingServiceClient
}

// NewMockReportingServiceClient creates a new mock instance
func NewMockReportingServiceClient(ctrl *gomock.Controller) *MockReportingServiceClient {
	mock := &MockReportingServiceClient{ctrl: ctrl}
	mock.recorder = &MockReportingServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReportingServiceClient) EXPECT() *MockReportingServiceClientMockRecorder {
	return m.recorder
}

// ReportUsage mocks base method
func (m *MockReportingServiceClient) ReportUsage(arg0 context.Context, arg1 *v1.UsageRequest, arg2 ...grpc.CallOption) (*v1.UsageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReportUsage", varargs...)
	ret0, _ := ret[0].(*v1.UsageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportUsage indicates an expected call of ReportUsage
func (mr *MockReportingServiceClientMockRecorder) ReportUsage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportUsage", reflect.TypeOf((*MockReportingServiceClient)(nil).ReportUsage), varargs...)
}
